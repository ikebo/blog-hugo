<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>asyncio on Ike&#39;Log</title>
    <link>https://ikebo.cc/tags/asyncio/</link>
    <description>Recent content in asyncio on Ike&#39;Log</description>
    <image>
      <title>Ike&#39;Log</title>
      <url>https://ikebo.cc/papermod-cover.png</url>
      <link>https://ikebo.cc/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ikebo.cc/tags/asyncio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asyncio.sleep 和 time.sleep 的区别</title>
      <link>https://ikebo.cc/post/migrate/part2/asyncio.sleep-%E5%92%8C-time.sleep-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ikebo.cc/post/migrate/part2/asyncio.sleep-%E5%92%8C-time.sleep-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>time.sleep是针对整个线程，整个线程会挂起，不再执行任何操作。
asyncio.sleep是针对当前协程而言，告诉事件循环：请去执行别的操作，相当于模拟了一次网络IO，不会阻塞其他协程的执行。
import time import asyncio async def hello(): print(&amp;#39;Hello ...&amp;#39;) await asyncio.sleep(5) # time.sleep(5) print(&amp;#39;... World!&amp;#39;) async def main(): await asyncio.gather(hello(), hello()) loop = asyncio.get_event_loop() loop.run_until_complete(main()) 运行结果：
Hello ... Hello ... ... World! ... World! import time import asyncio async def hello(): print(&amp;#39;Hello ...&amp;#39;) # await asyncio.sleep(5) time.sleep(5) print(&amp;#39;... World!&amp;#39;) async def main(): await asyncio.gather(hello(), hello()) loop = asyncio.get_event_loop() loop.run_until_complete(main()) 运行结果：
Hello ... ... World! Hello ... ... World! </description>
    </item>
    
  </channel>
</rss>
