<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on Ike&#39;Log</title>
    <link>https://ikebo.cc/tags/java/</link>
    <description>Recent content in java on Ike&#39;Log</description>
    <image>
      <title>Ike&#39;Log</title>
      <url>https://ikebo.cc/papermod-cover.png</url>
      <link>https://ikebo.cc/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ikebo.cc/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java传递函数实现懒执行</title>
      <link>https://ikebo.cc/post/migrate/java%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%87%92%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ikebo.cc/post/migrate/java%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%87%92%E6%89%A7%E8%A1%8C/</guid>
      <description>看下面这个方法:
public static JSONObject call(byte[] img, String algName, String algUrl) { long startTime = System.currentTimeMillis(); try { HttpResponse resp = OkHttpUtil.post(algUrl, MediaType.parse(&amp;#34;application/octet-stream&amp;#34;), img, connectTimout, readAndWriteTimeout); // 省略代码块... } catch (Exception e) { // 省略代码块... } } 方法的入参是图片二进制流，模型名称和模型地址，方法的操作是用图片调用对应的模型，然后做一些日志记录、监控指标上报、错误处理等操作，最终返回模型的json格式结果。
可以看到其中模型的调用方式是确定的，直接将图片放在http body中，content-type为application/octet-stream
现在有一个模型，调用方式不一样，需要以form-data的格式把数据传过去，图片的名字必须为image, 像这样:
OkHttpUtil.post(url, null, &amp;#34;image&amp;#34;, img, null, 10000L, 10000L) 两者唯一的区别只是调用方式不一样，如果能把调用方式抽象出来单独传递的话，那是极好的。像Python这类的动态语言是很容易实现的，直接将函数作为参数传递，之后用()调用运算符调用即可：
def func(): return &amp;#34;world&amp;#34; def outter(fun): print(&amp;#34;hello, {}&amp;#34;.format(fun())) outter(func) # &amp;#34;hello, world&amp;#34; 联想到Java中是否也可以这样呢，Java也是可以支持函数式编程的，自然也是可以的。实现方式如下
定义一个函数式接口:
@FunctionalInterface public interface Lazy&amp;lt;T&amp;gt; { T value(); } 增加一个重载call方法，需要额外传入Lazy类型的参数httpHolder</description>
    </item>
    
  </channel>
</rss>
