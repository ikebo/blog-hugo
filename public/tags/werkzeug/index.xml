<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>werkzeug on Ike&#39;Log</title>
    <link>https://ikebo.cc/tags/werkzeug/</link>
    <description>Recent content in werkzeug on Ike&#39;Log</description>
    <image>
      <title>Ike&#39;Log</title>
      <url>https://ikebo.cc/papermod-cover.png</url>
      <link>https://ikebo.cc/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ikebo.cc/tags/werkzeug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么使用object.__setattr__</title>
      <link>https://ikebo.cc/post/migrate/part2/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8object.__setattr__/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ikebo.cc/post/migrate/part2/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8object.__setattr__/</guid>
      <description>werkzeug 0.6.1中Local的初始化是这样的：
class Local(object): __slots__ = (&amp;#39;__storage__&amp;#39;, &amp;#39;__lock__&amp;#39;) def __init__(self): object.__setattr__(self, &amp;#39;__storage__&amp;#39;, {}) object.__setattr__(self, &amp;#39;__lock__&amp;#39;, allocate_lock()) 我当时很奇怪为什么要用object.__setattr__, 而不是直接用self.__storage__, 当我直接用self.__storage__ = {}实现的时候才发现问题：
self.__storage__会调用__setattr__，而__setattr__中会调用self.__lock__.acquire()，因为此时self.__lock__还没有定义, 所以会调用self.__getattr__，而self.__getattr__中也会调用self.__lock__.acquire(), 此后就会一直调用self.__getattr__，最终导致StackOverflow。
而显示调用object.__setattr__就不会触发Local内部的__setattr__，从而避免上述情况。而且两者的效果是一样的，object.__setattr__的第一个参数是self，也就是这个实例，所以并不用担心是不是在父类定义了一个公共属性。
类似的还有使用object.__getattribute__的情况，一般也是为了避免无限递归。</description>
    </item>
    
    <item>
      <title>理解werkzeug中的Local对象</title>
      <link>https://ikebo.cc/post/migrate/part2/%E7%90%86%E8%A7%A3werkzeug%E4%B8%AD%E7%9A%84local%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ikebo.cc/post/migrate/part2/%E7%90%86%E8%A7%A3werkzeug%E4%B8%AD%E7%9A%84local%E5%AF%B9%E8%B1%A1/</guid>
      <description>ThreadLocal是线程级别的local，如果在greenlet或者协程这种微线程环境下，或者在多个请求共用一个线程的情况下，线程级别是不够的。ThreadLocal是thread-safe和thread-specific的, 而有些情况需要greenlet-safe和greenlet-specific或者request-safe和request-specific。
werkzeug 0.1版中Local的实现是这样的：
try: from py.magic import greenlet get_current_greenlet = greenlet.getcurrent del greenlet except (RuntimeError, ImportError): get_current_greenlet = lambda: None try: from thread import get_ident as get_current_thread from threading import Lock except ImportError: from dummy_thread import get_ident as get_current_thread from dummy_threading import Lock from werkzeug.utils import ClosingIterator def get_ident(): &amp;#34;&amp;#34;&amp;#34; Return a unique number for the current greenlet in the current thread. &amp;#34;&amp;#34;&amp;#34; return hash((get_current_thread(), get_current_greenlet())) class Local(object): def __init__(self): self.</description>
    </item>
    
  </channel>
</rss>
